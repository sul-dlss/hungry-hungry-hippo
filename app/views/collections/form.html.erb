<div data-controller="unsaved-changes" data-action="change->unsaved-changes#changed beforeunload@window->unsaved-changes#leavingPage turbo:before-visit@window->unsaved-changes#leavingPage">
  <% content_for :breadcrumbs do %>
    <%= render Elements::BreadcrumbNavComponent.new do |component| %>
      <% component.with_breadcrumb(text: 'Dashboard', link: dashboard_path) %>
      <% if (current_page?(action: :new) || (controller.action_name == 'create')) %>
        <% component.with_breadcrumb(text: t('collections.edit.no_title')) %>
      <% else %>
        <% component.with_collection_breadcrumb(text: @collection_form.title, link: collection_path(@collection_form.druid)) %>
      <% end %>
      <%# include an Edit breadcrumb only if title exists %>
      <% if @collection_form.title.present? %>
        <% component.with_breadcrumb(text: t('collections.edit.breadcrumb'), active: true) %>
      <% end %>
    <% end %>
  <% end %>
  <%= render Elements::HeadingComponent.new(level: :h1, variant: :h2, text: @collection_form.title || 'Untitled collection', classes: 'mb-3') %>
  <%= render Elements::AlertComponent.new(variant: :danger, value: t('messages.validation')) if defined?(@valid) && !@valid %>
  <% discard_draft_form_id = dom_id(@collection_form, 'discard_form') %>
  <%= render Edit::DiscardDraftFormComponent.new(presenter: @collection_presenter, id: discard_draft_form_id) if @collection_presenter %>
  <% active_tab_name = params[:tab]&.to_sym || :details %>
  <%= render Edit::TabForm::TabListComponent.new(model: @collection_form, hidden_fields: %i[lock version apo]) do |component| %>
    <% component.with_tab(label: t('collections.edit.panes.details.tab_label'), tab_name: :details, active_tab_name:) %>
    <% component.with_tab(label: t('collections.edit.panes.related_links.tab_label'), tab_name: :related_links, active_tab_name:) %>
    <% component.with_tab(label: t('collections.edit.panes.access.tab_label'), tab_name: :access, active_tab_name:) %>
    <% component.with_tab(label: t('collections.edit.panes.license.tab_label'), tab_name: :license, active_tab_name:) %>
    <% component.with_tab(label: t('collections.edit.panes.terms_of_use.label'), tab_name: :terms_of_use, active_tab_name:) %>
    <% component.with_tab(label: t('collections.edit.panes.participants.tab_label'), tab_name: :participants, active_tab_name:) %>
    <% component.with_tab(label: t('collections.edit.panes.workflow.tab_label'), tab_name: :workflow, active_tab_name:) %>
    <% component.with_tab(label: t('collections.edit.panes.types.tab_label'), tab_name: :types, active_tab_name:) %>
    <% component.with_tab(label: t('collections.edit.panes.works_contact_email.tab_label'), tab_name: :works_contact_email, active_tab_name:) %>
    <% component.with_tab(label: t('collections.edit.panes.contributors.tab_label'), tab_name: :contributors, active_tab_name:) %>
    <% component.with_tab(label: t('collections.edit.panes.deposit.tab_label'), tab_name: :deposit, active_tab_name:) %>
    <%# The panes below need a form in order to render their contents. This provides a "fake" form to use for that purpose. %>
    <%# TabListComponent will render the actual form. %>
    <% form_with(model: @collection_form) do |form| %>
      <% component.with_collection_pane(tab_name: :details, label: t('collections.edit.panes.details.label'), active_tab_name:, collection_presenter: @collection_presenter, previous_tab_btn: false) do %>
        <%= render Elements::Forms::TextFieldComponent.new(form:, field_name: :title, label: t('collections.edit.fields.title.label'), tooltip: t('collections.edit.fields.title.tooltip_html'), container_classes: 'pane-section', mark_required: true) %>
        <%= render Elements::Forms::TextareaFieldComponent.new(form:, field_name: :description, label: t('collections.edit.fields.description.label'), tooltip: t('collections.edit.fields.description.tooltip_html'), container_classes: 'pane-section', mark_required: true) %>
        <%= render NestedComponentPresenter.for(form:, field_name: :contact_emails, model_class: ContactEmailForm, form_component: Collections::Edit::ContactEmailsComponent, hidden_label: true, bordered: false, single_field: true, fieldset_classes: 'pane-section') %>
      <% end %>

      <% component.with_collection_pane(tab_name: :related_links, label: t('collections.edit.panes.related_links.label'), tooltip: t('collections.edit.panes.related_links.tooltip_html'), help_text: t('collections.edit.panes.related_links.help_text'), active_tab_name:, collection_presenter: @collection_presenter) do %>
        <%= render NestedComponentPresenter.for(form:, field_name: :related_links, model_class: RelatedLinkForm, form_component: RelatedLinks::EditComponent, fieldset_classes: 'pane-section', skip_tooltip: true) %>
      <% end %>

      <% component.with_collection_pane(tab_name: :access, label: t('collections.edit.panes.access.label'), active_tab_name:, collection_presenter: @collection_presenter) do %>
        <%= render Collections::Edit::AccessSettingsComponent.new(form:) %>
      <% end %>

      <% component.with_collection_pane(tab_name: :license, label: t('collections.edit.panes.license.label'), help_text: t('collections.edit.panes.license.help_text'), tooltip: t('collections.edit.panes.license.tooltip_html'), active_tab_name:, collection_presenter: @collection_presenter) do %>
        <%= render Collections::Edit::LicenseComponent.new(form:) %>
      <% end %>

      <% component.with_collection_pane(tab_name: :terms_of_use, label: I18n.t('collections.edit.panes.terms_of_use.label'), tooltip: t('collections.edit.panes.terms_of_use.tooltip_html'), active_tab_name:, collection_presenter: @collection_presenter) do |pane_component| %>
        <% pane_component.with_help do %>
          <p class="fw-bold mt-4"><%= t('license.edit.license_terms_of_use') %></p>
          <p class="my-4 ms-3 fst-italic"><%= t('license.terms_of_use') %></p>
          <p class="fw-bold">The option below will allow you either to:</p>
          <ol class="my-4">
            <li>Provide a custom use statement that will appear on every deposit in this collection or</li>
            <li>Allow depositors to enter a custom use statement, typically one required by a publisher in order to deposit an Open Access version of an article.</li>
          </ol>
          <p class="mb-0">You will also be able to provide custom instructions for this field if you wish.</p>
        <% end %>
        <%= render Collections::Edit::TermsOfUseComponent.new(form:) %>
      <% end %>

      <% component.with_collection_pane(tab_name: :participants, label: t('collections.edit.panes.participants.label'), help_text: t('collections.edit.panes.participants.help_text'), active_tab_name:, collection_presenter: @collection_presenter) do %>
        <%= render Collections::Edit::ParticipantNotificationsComponent.new(form:) %>
        <%= render Edit::BulkParticipantsComponent.new(form:, field_name: :managers, model_class: ManagerForm, form_component: Collections::Edit::ParticipantComponent,
                                                       help_text: 'Managers will receive an email when a work is deposited.') %>
        <%= render Edit::BulkParticipantsComponent.new(form:, field_name: :depositors, model_class: DepositorForm, form_component: Collections::Edit::ParticipantComponent) %>
      <% end %>

      <% component.with_collection_pane(tab_name: :workflow, label: t('collections.edit.panes.workflow.label'), help_text: t('collections.edit.panes.workflow.help_text_html'), active_tab_name:, collection_presenter: @collection_presenter) do %>
        <%= render Collections::Edit::WorkflowComponent.new(form:) %>
      <% end %>

      <% component.with_collection_pane(tab_name: :types, label: t('collections.edit.panes.types.label'), active_tab_name:, collection_presenter: @collection_presenter) do %>
        <%= render Collections::Edit::WorkTypeComponent.new(form:) %>
      <% end %>

      <% component.with_collection_pane(tab_name: :works_contact_email, label: t('collections.edit.panes.works_contact_email.label'), help_text: t('collections.edit.panes.works_contact_email.help_text'), active_tab_name:, collection_presenter: @collection_presenter) do %>
        <%= render Elements::Forms::TextFieldComponent.new(form:, field_name: :works_contact_email, label: t('collections.edit.fields.works_contact_email.label'), tooltip: t('collections.edit.fields.works_contact_email.tooltip_html'), container_classes: 'pane-section') %>
      <% end %>

      <% component.with_collection_pane(tab_name: :contributors, label: t('collections.edit.panes.contributors.label'), help_text: t('collections.edit.panes.contributors.help_text'), active_tab_name:, collection_presenter: @collection_presenter) do %>
        <%= render NestedComponentPresenter.for(form:, field_name: :contributors, model_class: ContributorForm, form_component: Edit::ContributorComponent, hidden_label: true, fieldset_classes: 'pane-section') %>
      <% end %>

      <% component.with_collection_pane(tab_name: :deposit, label: t('collections.edit.panes.deposit.label'), help_text: t('collections.edit.panes.deposit.help_text_html'), active_tab_name:, collection_presenter: @collection_presente, next_tab_btn: false) do |pane_component| %>
        <%# For spacing %>
        <div class="pane-section"></div>
        <% pane_component.with_deposit_button do %>
          <%= render Elements::Forms::SubmitComponent.new(label: 'Save', data: { action: 'unsaved-changes#allowFormSubmission' }) %>
        <% end %>
      <% end %>
    <% end %>
  <% end %>
</div>
