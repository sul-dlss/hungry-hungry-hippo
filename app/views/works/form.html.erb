<div data-controller="unsaved-changes" data-action="change->unsaved-changes#changed beforeunload@window->unsaved-changes#leavingPage turbo:before-visit@window->unsaved-changes#leavingPage">
  <% content_for :breadcrumbs do %>
    <%= render Elements::BreadcrumbNavComponent.new do |component| %>
      <% component.with_breadcrumb(text: 'Dashboard', link: dashboard_path) %>
      <% component.with_collection_breadcrumb(text: @collection.title, link: collection_path(@work_form.collection_druid)) %>
      <% if (current_page?(action: :new) || (controller.action_name == 'create')) %>
        <% component.with_breadcrumb(text: I18n.t('works.edit.no_title')) %>
      <% else %>
        <% component.with_title_breadcrumb(text: @work_form.title, link: work_path(@work)) %>
        <% component.with_breadcrumb(text: t('works.edit.breadcrumb')) %>
      <% end %>
    <% end %>
  <% end %>
  <%= render Elements::HeadingComponent.new(level: :h1, variant: :h2, text: @work_form.title || t('works.edit.no_title'), classes: 'mb-3') %>
  <%= render Works::Show::ReviewRejectedComponent.new(work: @work) if @work %>
  <%= render Elements::AlertComponent.new(variant: :danger, value: t('messages.validation')) if defined?(@valid) && !@valid %>
  <% form_id = dom_id(@work_form, 'tabbed_form') %>
  <% discard_draft_form_id = dom_id(@work_form, 'discard_form') %>
  <%= render Edit::DiscardDraftFormComponent.new(presenter: @work_presenter, id: discard_draft_form_id) if @work_presenter %>
  <% active_tab_name = params[:tab]&.to_sym || @active_tab_name || :files %>
  <%= render Edit::TabForm::TabListComponent.new(model: @work_form, form_id:, hidden_fields: %i[lock version collection_druid content_id creation_date deposit_publication_date apo copyright]) do |component| %>
    <% component.with_tab(label: t('works.edit.panes.files.tab_label'), tab_name: :files, active_tab_name:) %>
    <% component.with_tab(label: t('works.edit.panes.title.tab_label'), tab_name: :title, active_tab_name:) %>
    <% component.with_tab(label: t('works.edit.panes.contributors.tab_label'), tab_name: :contributors, active_tab_name:) %>
    <% component.with_tab(label: t('works.edit.panes.abstract.tab_label'), tab_name: :abstract, active_tab_name:) %>
    <% component.with_tab(label: t('works.edit.panes.types.tab_label'), tab_name: :types, active_tab_name:) %>
    <% component.with_tab(label: t('works.edit.panes.doi.tab_label'), tab_name: :doi, active_tab_name:) %>
    <% component.with_tab(label: t('works.edit.panes.access.tab_label'), tab_name: :access, active_tab_name:) %>
    <% component.with_tab(label: t('works.edit.panes.license.tab_label'), tab_name: :license, active_tab_name:) %>
    <% component.with_tab(label: t('works.edit.panes.dates.tab_label'), tab_name: :dates, active_tab_name:) %>
    <% component.with_tab(label: t('works.edit.panes.related_content.tab_label'), tab_name: :related_content, active_tab_name:) %>
    <% component.with_tab(label: t('works.edit.panes.citation.tab_label'), tab_name: :citation, active_tab_name:) %>
    <% component.with_tab(label: t('works.edit.panes.deposit.tab_label'), tab_name: :deposit, active_tab_name:) %>
    <%# The panes below need a form in order to render their contents. This provides a "fake" form to use for that purpose. %>
    <%# TabListComponent will render the actual form. %>
    <% form_with(model: @work_form) do |form| %>
      <%# This pane is outside the work form because it contains its own forms for files. %>
      <% component.with_before_form_pane(tab_name: :files, label: t('works.edit.panes.files.label'), form_id:, discard_draft_form_id:, work_presenter: @work_presenter, active_tab_name:, previous_tab_btn: false) do %>
        <%= render Elements::Forms::InvalidFeedbackComponent.new(form:, field_name: :content) %>

        <%= render 'contents/edit', content: @content %>

        <% if Settings.globus.enabled %>
          <%= turbo_frame_tag 'globus', src: new_content_globus_path(@content), data: { controller: 'dropzone-files', dropzone_files_dropzone_outlet: '.dropzone' }, class: 'dropzone-files' do %>
            <%= render Elements::SpinnerComponent.new %>
          <% end %>

          <%= render Elements::HorizontalRuleComponent.new(classes: 'my-3') %>
        <% end %>

        <%= render Edit::SectionHeaderComponent.new(title: t('works.edit.panes.files.list')) %>
        <div id="content-files" class="pane-section">
          <%= turbo_frame_tag @content, 'show', src: content_path(@content), data: { controller: 'dropzone-files' }, class: 'dropzone-files' do %>
            <%= render Elements::SpinnerComponent.new %>
          <% end %>
        </div>
      <% end %>

      <% component.with_work_pane(tab_name: :title, label: t('works.edit.panes.title.label'), form_id:, discard_draft_form_id:, work_presenter: @work_presenter, active_tab_name:) do %>
        <%= render Elements::Forms::TextareaFieldComponent.new(form:, field_name: :title, label: t('works.edit.fields.title.label'), tooltip: t('works.edit.fields.title.tooltip_html'),
                                                               help_text: t('works.edit.fields.title.help_text'), width: 500, rows: 1, container_classes: 'pane-section', mark_required: true) %>
        <%= render NestedComponentPresenter.for(form:, field_name: :contact_emails, model_class: ContactEmailForm, form_component: Works::Edit::ContactEmailsComponent, hidden_label: true, bordered: false, single_field: true, fieldset_classes: 'pane-section') %>

        <% if @work_form.works_contact_email.present? %>
          <%= form.hidden_field :works_contact_email %>

          <div class="pane-section">
            <p>
              Contact email provided by collection manager <%= render Elements::TooltipComponent.new(target_label: 'Provided contact email', tooltip: t('works.edit.fields.works_contact_email.tooltip_html')) %>
            </p>
            <p>
              <%= @work_form.works_contact_email %>
            </p>
          </div>
        <% end %>
      <% end %>

      <% component.with_work_pane(tab_name: :contributors, label: t('works.edit.panes.contributors.label'), help_text: t('works.edit.panes.contributors.help_text'), tooltip: t('works.edit.panes.contributors.tooltip_html'), form_id:, discard_draft_form_id:, work_presenter: @work_presenter, active_tab_name:) do %>
        <%# The invalid-feedback controller is used to hide the invalid feedback message (cited contributor required)
        when citation radio is changed or a new contributor is added. %>
        <div data-controller="invalid-feedback" data-invalid-feedback-tab-error-outlet=".tab-error" data-invalid-feedback-tab-value="contributors">
          <%= render Elements::Forms::InvalidFeedbackComponent.new(form:, field_name: :contributors, data: { invalid_feedback_target: 'feedback' }) %>
          <%= render NestedComponentPresenter.for(form:, field_name: :contributors, model_class: ContributorForm, form_component: Edit::ContributorComponent, hidden_label: true, reorderable: true, fieldset_classes: 'pane-section', add_button_data: { action: 'invalid-feedback#hide' }) %>
        </div>
      <% end %>

      <% component.with_work_pane(tab_name: :abstract, label: t('works.edit.panes.abstract.label'), help_text: t('works.edit.panes.abstract.help_text'), form_id:, discard_draft_form_id:, work_presenter: @work_presenter, active_tab_name:) do %>
        <%= render Elements::Forms::TextareaFieldComponent.new(form:, field_name: :abstract, label: t('works.edit.fields.abstract.label'), tooltip: t('works.edit.fields.abstract.tooltip_html'), container_classes: 'pane-section', mark_required: true) %>
        <%= render NestedComponentPresenter.for(form:, field_name: :keywords, model_class: KeywordForm, form_component: Works::Edit::KeywordComponent, hidden_label: true, bordered: false, single_field: true, fieldset_classes: 'pane-section') %>
      <% end %>

      <% component.with_work_pane(tab_name: :types, label: t('works.edit.panes.types.label'), form_id:, discard_draft_form_id:, work_presenter: @work_presenter, active_tab_name:) do %>
        <%= render Works::Edit::WorkTypeComponent.new(form:, collection: @collection) %>
      <% end %>

      <% component.with_work_pane(tab_name: :doi, label: t('works.edit.panes.doi.label'), form_id:, discard_draft_form_id:, work_presenter: @work_presenter, active_tab_name:) do |pane_component| %>
        <%= render Works::Edit::DoiComponent.new(form:, collection: @collection) %>

        <% pane_component.with_help do %>
          <%= link_to_new_tab('What is a DOI?', 'https://sdr.library.stanford.edu/documentation/purls-dois-and-orcid-ids', class: 'ms-3') %>
        <% end %>
      <% end %>

      <% component.with_work_pane(tab_name: :access, label: t('works.edit.panes.access.label'), form_id:, discard_draft_form_id:, work_presenter: @work_presenter, active_tab_name:) do %>
        <%= render Works::Edit::AccessSettingsComponent.new(form:, collection: @collection) %>
      <% end %>

      <% component.with_work_pane(tab_name: :license, label: t('works.edit.panes.license.label'), form_id:, discard_draft_form_id:, work_presenter: @work_presenter, active_tab_name:) do %>
        <%= render Works::Edit::LicenseComponent.new(form:, license_presenter: @license_presenter) %>
        <% unless @collection.no_custom_rights_statement_option? %>
          <%= render Works::Edit::TermsOfUseComponent.new(form:, collection: @collection) %>
        <% end %>
      <% end %>

      <% component.with_work_pane(tab_name: :dates, label: t('works.edit.panes.dates.label'), tooltip: t('works.edit.panes.dates.tooltip_html'), form_id:, discard_draft_form_id:, work_presenter: @work_presenter, active_tab_name:) do %>
        <%= render Works::Edit::DatesComponent.new(form:) %>
      <% end %>

      <% component.with_work_pane(tab_name: :related_content, label: t('works.edit.panes.related_content.label'), form_id:, discard_draft_form_id:, work_presenter: @work_presenter, active_tab_name:) do %>
        <%= render NestedComponentPresenter.for(form:, field_name: :related_works, model_class: RelatedWorkForm, form_component: RelatedWorks::EditComponent, fieldset_classes: 'pane-section') %>
        <%= render NestedComponentPresenter.for(form:, field_name: :related_links, model_class: RelatedLinkForm, form_component: RelatedLinks::EditComponent, fieldset_classes: 'pane-section') %>
      <% end %>

      <% component.with_work_pane(tab_name: :citation, label: t('works.edit.panes.citation.label'), tooltip: t('works.edit.panes.citation.tooltip_html'), form_id:, discard_draft_form_id:, work_presenter: @work_presenter, help_text: t('works.edit.panes.citation.help_text'), active_tab_name:) do %>
        <%= render Works::Edit::CitationComponent.new(form:) %>
      <% end %>

      <% component.with_work_pane(tab_name: :deposit, label: t('works.edit.panes.deposit.label'), form_id:, discard_draft_form_id:, work_presenter: @work_presenter, active_tab_name:, next_tab_btn: false) do |pane_component| %>
        <% pane_component.with_help do %>
          <p class="mb-0">
            <%= t('works.edit.panes.deposit.help_text') %>
            <% if @work_form.agree_to_terms %>You have accepted the <a href="#" data-bs-toggle="modal" data-bs-target="#tod-modal">Terms of Deposit</a>.<% end %>
          </p>
        <% end %>

        <% if @work_presenter && !@work_presenter.first_draft? %>
          <div class="pane-section">
            <%= render Elements::Forms::TextareaFieldComponent.new(form:, field_name: :whats_changing, label: t('works.edit.fields.whats_changing.label'), tooltip: t('works.edit.fields.whats_changing.tooltip_html'), maxlength: 100) %>
          </div>
        <% else %>
          <%# This is a dummy value that is needed for validation, but won't be used for the version description. %>
          <%= form.hidden_field :whats_changing, value: 'Initial version' %>
        <% end %>
        <%= render Works::Edit::TermsOfDepositComponent.new(form:) %>
        <% pane_component.with_deposit_button do %>
          <%= render Works::Edit::SubmitComponent.new(work: @work, collection: @collection, data: { action: 'unsaved-changes#allowFormSubmission' }) %>
        <% end %>
      <% end %>
    <% end %>
  <% end %>
</div>
